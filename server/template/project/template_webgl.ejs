<!DOCTYPE html>
<html lang="en">

<%- include("../component/head") %>

<body>
  <div class="wrapper">
    <%- include("../component/header",{param:{}}) %>

    <div id="info">WebGL 2 Samples - draw_instanced</div>
    <p id="description">
      This samples demonstrates the use of gl.DrawArraysInstanced()
    </p>

    <script id="vs" type="x-shader/x-vertex">
        #version 300 es
        #define POSITION_LOCATION 0
        #define COLOR_LOCATION 1
        
        precision highp float;
        precision highp int;

        layout(location = POSITION_LOCATION) in vec2 pos;
        layout(location = COLOR_LOCATION) in vec4 color;
        out vec4 v_color;

        void main()
        {
            v_color = color;
                        //gl_Position = vec4(pos , 0.0, 1.0);
                        switch(gl_InstanceID){
                            case 0:
                            gl_Position = vec4(pos.x- 0.5,pos.y+0.5, 0.0, 1.0);
                            break;
                            case 1:
                            gl_Position = vec4(pos.x- 0.5,pos.y-0.5, 0.0, 1.0);
                            break;
                            case 2:
                            gl_Position = vec4(pos.x+ 0.5,pos.y+0.5, 0.0, 1.0);
                            break;
                            case 3:
                            gl_Position = vec4(pos.x+ 0.5,pos.y-0.5, 0.0, 1.0);
                            break;
                        }
        }
    </script>

    <script id="fs" type="x-shader/x-fragment">
        #version 300 es
        precision highp float;
        precision highp int;

        in vec4 v_color;
        out vec4 color;

        void main()
        {
            color = v_color;
        }
    </script>

    <script src="js/stats.min.js"></script>
    <script>
      (function () {
        'use strict';

        var container = document.createElement('div');
        document.body.appendChild(container);
        var stats = new Stats();
        container.appendChild(stats.dom);


        var getShaderSource = function (id) {
          return document.getElementById(id).textContent.replace(/^\s+|\s+$/g, '');
        };

        function createShader(gl, source, type) {
          var shader = gl.createShader(type);
          gl.shaderSource(shader, source);
          gl.compileShader(shader);
          return shader;
        };

        var createProgram = function (gl, vertexShaderSource, fragmentShaderSource) {
          var program = gl.createProgram();
          var vshader = createShader(gl, vertexShaderSource, gl.VERTEX_SHADER);
          var fshader = createShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);
          gl.attachShader(program, vshader);
          gl.deleteShader(vshader);
          gl.attachShader(program, fshader);
          gl.deleteShader(fshader);
          gl.linkProgram(program);

          var log = gl.getProgramInfoLog(program);
          if (log) {
            console.log(log);
          }

          log = gl.getShaderInfoLog(vshader);
          if (log) {
            console.log(log);
          }

          log = gl.getShaderInfoLog(fshader);
          if (log) {
            console.log(log);
          }

          return program;
        };

        // -- Init Canvas
        var canvas = document.createElement('canvas');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        document.body.appendChild(canvas);

        // -- Init WebGL Context
        var gl = canvas.getContext('webgl2', { antialias: false });
        var isWebGL2 = !!gl;
        if (!isWebGL2) {
          document.getElementById('info').innerHTML = 'WebGL 2 is not available.  See <a href="https://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">How to get a WebGL 2 implementation</a>';
          return;
        }

        const M = 3;

        // -- Init Program
        var program = createProgram(gl, getShaderSource('vs'), getShaderSource('fs'));
        gl.useProgram(program);

        // -- Init Vertex Array
        var vertexArray = gl.createVertexArray();
        gl.bindVertexArray(vertexArray);

        // -- Init Buffers
        var vertexPosLocation = 0;  // set with GLSL layout qualifier
        var vertices = new Float32Array([
          -0.3, -0.3,
          0.3, -0.3,
          0.0, 0.3,
          -0.4, -0.4,
          0.4, -0.4,
          0.0, 0.4
        ]);
        var vertexPosBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
        gl.enableVertexAttribArray(vertexPosLocation);
        gl.vertexAttribPointer(vertexPosLocation, 2, gl.FLOAT, false, 0, 0);

        var vertexColorLocation = 1;  // set with GLSL layout qualifier
        var colors = new Float32Array([
          1.0, 0.0, 0.0,
          0.0, 1.0, 0.0,
          0.0, 0.0, 1.0,
          1.0, 1.0, 1.0
        ]);
        var vertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);
        gl.enableVertexAttribArray(vertexColorLocation);
        gl.vertexAttribPointer(vertexColorLocation, 3, gl.FLOAT, false, 0, 0);
        gl.vertexAttribDivisor(vertexColorLocation, M); // attribute used once per instance

        gl.bindVertexArray(null);

        // -- Render
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        /*
                    // -- Delete WebGL resources
                    gl.deleteBuffer(vertexPosBuffer);
                    gl.deleteBuffer(vertexColorBuffer);
                    gl.deleteProgram(program);
                    gl.deleteVertexArray(vertexArray);
                    */


        function animate() {

          requestAnimationFrame(animate);

          render();
          stats.update();

        };

        function render() {
          gl.clear(gl.COLOR_BUFFER_BIT);

          gl.bindVertexArray(vertexArray);


          //gl.drawArrays(gl.TRIANGLES, 0, 3);
          gl.drawArraysInstanced(gl.TRIANGLES, 3, 3, M);

        };

        animate();
      })();
    </script>
    <div id="highlightedLines" style="display: none">#L98</div>
  </div>
</body>

</html>